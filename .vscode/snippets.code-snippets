{
    // Place your Hina workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.

    "Hina command template": {
        "scope": "typescript",
        "prefix": "HinaCommandTemplate",
        "body": [
            "import { Client, Message } from 'discord.js';",
            "",
            "import CommandArgument from '../../res/models/CommandArgument.js';",
            "import { BaseCommand } from 'hina';",
            "",
            "export default class ${1:commandname} implements BaseCommand {",
            "    name: String;",
            "    description: String;",
            "    commandUsage: String;",
            "    aliases: String[];",
            "    args: CommandArgument[];",
            "",
            "    constructor() {",
            "        this.name = '${1:commandname}';",
            "        this.description = '${2:command description.}';",
            "        this.commandUsage = '${3:<required_arg> [optional_arg]}';",
            "        this.aliases = [",
            "            /* aliases */",
            "        ];",
            "        this.args = [new CommandArgument().setName('arg1').setDescription('command argument description.')];",
            "    }",
            "",
            "    async execute(Hina: Client, msg: Message, args: string[]) {",
            "        // command body here",
            "    }",
            "}"
        ],
        "description": "Create a basic Hina Command class."
    }
}

